#!/usr/bin/python
#
#   "Ubproxy"
#   with GTK Interface 
#
#   Ubuntu and derivatives proxy setting tool.
#   This sets the apt,bash and profile config-files.
#
#   An inevitable tool to configure proxy-settings in universities and office environmment.
#   Eliminates the need of repetitive editing of system files that is prone to frequent manual errors.  
#   Atleast 3 different individual config files needs to be edited to configure proxy settings,
#   This can be used in an environment where all the Three - ("http","https" and the "ftp") proxies
#   have the same settings.
#
#
#   Author:
#
#   E-mail:
#
#   Date:
#
#   Profile:
#
#   Forked from  https://code.google.com/p/ubproxy/
#
# Changelog:
# >  GTK support enabled
# >  Removed profile saving option
#


import gtk
import os
import subprocess
import re
import sys
import glob
from datetime import datetime
from pwd import getpwnam


###############
## TODO: externalizable stuff / to GUI or cmd line
###############

#--------------
# only for plugins/apps:
#--------------

## will be assigned the given GUI conf by the framework
proxyCfg = None  # type: ProxyCfg

enableProxyPhaseOn = None  # type: bool ; will be set by framework during execution

appsKeepAllProxySettingsCleanOn = True  ## type: bool ; (recommended:) 
                                        ## remove e.g. host and port settings even though there may be some separate ...
                                        ##    "[ ] activate proxy" switch on deactivation 
                                        ## or "[x] use sys proxy" switch on activation
#appsKeepAllProxySettingsCleanOn = False  ## type: bool

appsUseSystemProxiesOnDeactivate = True  # type: bool ; (recommended:) if supported by the app, system proxy settings should be used on deactivation
#appsUseSystemProxiesOnDeactivate = False  # type: bool ; e.g. to ignore system proxy settings on deactivation

appsUseSystemProxiesOnActivate = True  # type: bool ; (recommended:) if supported by the app, system proxy settings should be used on activation
#appsUseSystemProxiesOnActivate = False  # type: bool e.g. to ignore system proxy settings on activation


#--------------
# shared with plugins:
#--------------

dbgOn = False  ## prod: debug logging off
#dbgOn = True  ## debug: debug logging on

#--------------
# not relevant for plugins (code) itself:
#--------------

## plugins not starting with 'P' will be ignored => easy option e.g. to deactivate them by prefixing '_'
##   => avoids reported ignoreable errors on execution
pluginsPathGlob = '%s/plugins/P*' % os.path.dirname(os.path.realpath(__file__))
pluginsUseMatch = '.*'  ## recommended: use all and let those report problems that e.g. do not find an installed plugin-specific app
#pluginsUseMatch='Plugin(EtcEnv|BashRc|AptConf)'  ## e.g. to only use those

noProxyDefaultDelim= ',  '
noProxyDelimMatch= '[\s,;|]+'
noProxyDefault= 'localhost%s127.0.0.1' % noProxyDefaultDelim

backupsDir = '%s/.ubproxy-backups/' % os.getenv('HOME')
logs = "/var/log/ubproxy.log"


###############
## code
###############

errCnt = 0

try:
	_log = open(logs, "a")
except:
	print "need sudo rights!"
	sys.exit(1)

def glog(msg): _log.write("%s\n" % (msg))
def gerr(msg): global errCnt ; errCnt += 1 ; glog("ERR: %s" % msg) ; sys.stderr.write('ERR: %s\n' % msg)
def gdbg(msg): 
	if dbgOn: glog('DBG: %s' % (msg))

glog('\n%s' % (str(datetime.now())))
print ""  ## better readability
if dbgOn: msg = 'WARN: dbgOn= True !' ;  print msg ;  glog(msg)

mgr = None  # type: Mgr


class ProxyCfg:
	srv = ""      # type: str
	port = 8080   # type: int
	usrname = ""  # type: str
	usrpass = ""  # type: str
	noProxy = ''  # type: str

	## default: each protocol uses the "http" protocol prefix for URL-based proxy reference, e.g. "http://myproxy:8080"
	protIdPrefixMap = { "http": "http",  "ftp": "http",  "https": "http" }
	
	def authSrvPortSuffix(self, showPassOn = False):
		return "%s%s:%s" % (
			"" if self.usrname == "" else ("%s:%s@" % (self.ursname, self.usrpass if showPassOn else '***')),
			self.srv, self.port)

	## noProxy:
	##   removes/substitutes undesired separators etc. from cfg
	##   by default returns comma-separated list with two spaces after comma
	##   e.g.: "localhost,  127.0.0.1"
	def __init__(  self,  srv,  port,  usrname,  usrpass,  httpsProtocol, noProxy  ):  # type: (str, int, str, str, str, str)
		self.srv = srv
		self.port = port
		self.usrname = usrname
		self.usrpass = usrpass
		self.protIdPrefixMap["https"] = httpsProtocol
		if dbgOn: self.dbg('noProxy: %s' % noProxy)
		self.noProxy = re.sub(  noProxyDelimMatch,  noProxyDefaultDelim,  noProxy  )
		self.log('proxy cfg prepared: %s' % (self))

	def __str__(self): return 'authSrvPortSuffix=< %s >,  noProxy=< %s >,  protoMap= %s' % (self.authSrvPortSuffix(),  self.noProxy,  self.protIdPrefixMap)

	def log(self, msg): glog('ProxyCfg: %s' % (msg))
	def dbg(self, msg): gdbg('ProxyCfg: %s' % (msg))
	def err(self, msg): gerr('ProxyCfg: %s' % (msg))

	def noProxyAsList(self):
		return self.noProxy.split(noProxyDefaultDelim)


## UI independent business logic
class Mgr:

    plugins = []  # type: [Plugin]

    def log(self, msg): glog('Mgr: %s' % (msg))
    def dbg(self, msg): gdbg('Mgr: %s' % (msg))
    def err(self, msg): gerr('Mgr: %s' % (msg))

	## => decision table: 
	##
	## scenarios:
	##   c     = appsKeepAllProxySettingsCleanOn
	##   ds    = appsUseSystemProxiesOnDeactivate
	##   as    = appsUseSystemProxiesOnActivate
	##   a/d   = (de)activation app proxy scenario
	##
	## actions:
	##   +/-   = set up /remove all proxy settings (ignore system proxy usage switches)
	##   s+/s- = system proxy use/ignore
	##   c+    = clean irrelevant entries
	## 
	##   *     = flag does'nt matter / all possibilities lead to same actions
	##
	##   a/d | as | ds | c | actions
	##   ---------------------------
	##   a   | x  | *  | x | s+, c+
	##   a   | x  | *  | - | s+
	##   a   | -  | *  | * | s-, +
	##   d   | *  | x  | x | s+, c+
	##   d   | *  | x  | - | s+
	##   d   | *  | -  | * | s-, c+
	##
	##   => action logic:
	##
	##     s- <= a+!as or d+!ds
	##    (s+ <= !s-)
	##     +  <= a+!as
	##     c+ <= a+as+c or d+ds+c or d+!ds
	##         = (a+as or d+ds)+c or d+!ds

	## see action logic above
    def appsUseSystemProxiesOn(self):  # type: (bool) => bool
		return not(                                                                           ## !(
			       enableProxyPhaseOn and not appsUseSystemProxiesOnActivate              ##      a+!as
			or not enableProxyPhaseOn and     appsUseSystemProxiesOnDeactivate            ##   or d+!ds )
		)

    ## see action logic above
    def appsSetupProxyDetailsOn(self):  # type: (bool) => bool
		return enableProxyPhaseOn and not appsUseSystemProxiesOnActivate                      ## a+!as

    ## see action logic above
    def appsCleanProxyDetailsOn(self):  # type: (bool) => bool
		return (  appsKeepAllProxySettingsCleanOn and (                                       ## c + (
				       enableProxyPhaseOn and     appsUseSystemProxiesOnActivate      ##      a+as
				or not enableProxyPhaseOn and     appsUseSystemProxiesOnDeactivate )  ##   or d+ds)
		        or         not enableProxyPhaseOn and not appsUseSystemProxiesOnDeactivate )  ## or d+!ds

    def loadPlugins(self):
	self.log('loadPlugins: from "plugins" subdir (filenames should match class name without optional ".py" extension!)')
	plugClasses = []
	for fn in glob.glob( pluginsPathGlob ):
		try:
			if re.match( pluginsUseMatch, fn ):
				self.log('loadPlugins: file=< %s >' % fn)
				with open(fn) as f:
					exec(f.read())
				exec("plugClasses.append( %s )" % re.sub(  r'.+/([^/\.]+)(|\.py)$',  r'\1',  fn  ))
			else:
				self.log('loadPlugins: ignored: file=< %s >,  pluginsUseMatch=< %s >' % (fn, pluginsUseMatch))
		except:
		    self.err("loadPlugins: ignoring error: loading code: filepath < %s >:  %s" % (fn,  sys.exc_info()))
	plugClassesLast = []
	for cl in plugClasses:
		try:
			self.plugins.append( cl() )
			if self.plugins[-1].execLastOn:
				self.log('loadPlugins: execLastOn so moving to end of plugin exec list: %s' % self.plugins[-1])
				plugClassesLast.append( self.plugins[-1] )
				del self.plugins[-1]
		except:
		    self.err("loadPlugins: ignoring error: instantiating: class < %s >:  %s" % (cl, sys.exc_info() ))
	self.plugins += plugClassesLast
	

    def appsDetails(self):
	return 'appsUseSystemProxiesOn= %s,  appsSetupProxyDetailsOn= %s,  appsCleanProxyDetailsOn= %s' % (self.appsUseSystemProxiesOn(), self.appsSetupProxyDetailsOn(), self.appsCleanProxyDetailsOn() )


    def pluginDetails(self, plug): 
	return '%s: plugin= %s,  appUseSystemProxiesOn= %s,  appSetupProxyDetailsOn= %s,  appsCleanProxyDetailsOn= %s' % (
		'proxyActivate' if enableProxyPhaseOn else 'proxyDeactivate',  plug.name(),  
		  plug.appUseSystemProxiesOn(),  plug.appSetupProxyDetailsOn(),  plug.appCleanProxyDetailsOn() )


    def proxyActivate(self):

	self.loadPlugins()
        self.proxyFilesBackup()

	global enableProxyPhaseOn
	enableProxyPhaseOn = True
	self.log('proxyActivate: %s' % self.appsDetails())
	for p in self.plugins:
		try:
			self.log(self.pluginDetails(p))
			p.apply()
		except:
		    self.err("proxyActivate: ignoring plugin error: plugin=< %s >:  %s" % (p, sys.exc_info()))

	self.pluginSetupShow()
	uiMgr.finalDialog('SUCCESSFULLY')


    def proxyDeactivate(self):

	self.loadPlugins()
        self.proxyFilesBackup()

	global enableProxyPhaseOn
	enableProxyPhaseOn = False
	self.log('proxyDeactivate: %s' % self.appsDetails())
	for p in self.plugins:
		try:
			self.log(self.pluginDetails(p))
			p.apply()
		except:
		    self.err("proxyDeactivate: ignoring plugin error: plugin=< %s >:  %s" % (p, sys.exc_info()))

        self.log("Old Proxy-Settings removed")

	self.pluginSetupShow()
	uiMgr.finalDialog('SUCCESSFULLY REMOVED')


    def pluginSetupShow(self):
	glog('\n')
	for p in self.plugins:
		try:
			self.log('pluginSetupShow: %s\n_____start:_____' % p)
			print '\nshowing plugin setup for %s:\n' % p
			p.setupShow()
			glog('_____:end_____\n')
		except:
		    self.err("pluginSetupShow: ignoring plugin error: plugin=< %s >:  %s" % (p, sys.exc_info()))
	print ""  ## nice output


    def proxyFilesBackup(self):
	files = []
	for p in self.plugins:
		try:
			if isinstance(p, PluginFile):
				files.append( p.path() )
			else: self.log('proxyFilesBackup: ignoring non file plugin: %s: class= %s' % (p, p.__class__.__name__))
		except:
		    self.err("proxyFilesBackup: ignoring file plugin error collecting paths: plugin=< %s >:  %s" % (p, sys.exc_info()))

	self.log("proxyFilesBackup:  files= %s" % (files))
        try:
            os.mkdir( backupsDir )
        except:
            pass

        filstr = datetime.now().strftime('%Y%h%d_%H%M%S')
        newfolder = '%s/%s/' % (backupsDir, filstr)
        try:
            os.mkdir(newfolder)
        except:
            pass

        for fil in files:
            try:
		self.log("proxyFilesBackup:  file= < %s >" % (fil))
                with open(fil, 'r') as f1:  l = f1.read()

                if (fil.find(".") == -1):
                    newname = fil[fil.rfind('/') + 1:] + ".backup"
                else:
                    fil = fil[fil.rfind('/') + 1:]
                    newname = fil[:fil.find(".")] + ".backup"
                newname = newfolder + newname
                with open(newname, "w") as f2:  f2.write(l)
            except:
		self.err("proxyFilesBackup: ignoring plugin error on copy: plugin=< %s >:  %s" % (p, sys.exc_info()))
        self.log("Files have been backed up in '~/.Ubuntu-Proxy/'  with .backup extension")


    def destroy(self):
		if (_log != None):
		    _log.close()

    #def startUi(self):		
	#    if dbgOn: print ('DBG: ubproxy ui start')  ## debug
	#    ## TODO cmd line feature without GUI:
	#    #print('usage: ubproxy  [-u usrname  -pw  -h <host>  -po <port>  [-protoPrefixes=<for-http,for-https,for-ftp>]]\n'
	#	#+ '  no args: open Gnome GUI for setup')
	#    if not os.geteuid() == 0:
	#    	global args
	#	args = ['gksudo', sys.executable] + sys.argv + [os.environ]
	#	os.execlpe('gksudo', *args)
	#    if dbgOn: print ('DBG: after gksudo')  ## debug
	#    global uiMgr
	#    uiMgr = UiMgr()
	#    gtk.main()
	#    if dbgOn: print ('DBG: main finished')  ## debug


class Plugin:

	execLastOn = False  # e.g. PluginGsettings changes current user which can't easily be changed back
                            # leading to access right violations for later file modifications
                            # => moves such plugins at the end of the exec list

	def __str__(self): return '%s(%s)' % (self.__class__.__name__,  self.name())

	# @abstractmethod
	def name(self): pass

	# @abstractmethod
	def supportsSystemProxiesUsage(self): return False  # type: () => bool

	# @abstractmethod
	def setupShow(self): pass

	# called finally in Plugin __init__() constructor, e.g. to update execLastOn
	def load(self): pass

	## the standard line substitution logic calling first substLines(...) and if not disableOn: addLines(...)
	## disableOn:  if True: the proxy should be disabled
	# @abstractmethod
	def apply(self,  disableOn): pass  # type: (bool)


	def __init__(self):  # type(ProxyCfg)
		self.load()

	def log(self, msg): glog('plugin %s: %s' % (self.name(), msg))
	def dbg(self, msg): gdbg('plugin %s: %s' % (self.name(), msg))
	def err(self, msg): gerr('plugin %s: %s' % (self.name(), msg))

	def appUseSystemProxiesOn(self):  # type: (bool) => bool
		return mgr.appsUseSystemProxiesOn() and self.supportsSystemProxiesUsage()

	## if the plugin/app does not support system proxy usage but it should use it this will return True
	def appSetupProxyDetailsOn(self):  # type: (bool) => bool
		return mgr.appsSetupProxyDetailsOn() or enableProxyPhaseOn and not self.appUseSystemProxiesOn()

	def appCleanProxyDetailsOn(self):  # type: (bool) => bool
		return mgr.appsCleanProxyDetailsOn()


## simple whole-text(lines) matches that:
##  - can be substitution rules (that may also e.g. remove lines) applied on proxy removal or before setting it
##  - any logic on the file content on adding the proxy, e.g. appending (previously removed) lines
class PluginFile(Plugin):

	def __str__(self): return '%s(%s, path=< %s >)' % (self.__class__.__name__,  self.name(),  self.path())

	# @abstractmethod
	def path(self): pass

	## map of [match:repl] regex pairs, e.g. [[r'\n?(\s*export\s+(https?|ftp)_proxy\s*=\s*".*")', r'']]
	# @abstractmethod
	def substLineRules(self): pass  # type(bool)

	## the individual replacement string generation depending on the protocol id param
	# @abstractmethod
	def addLineForProtId(self,  lines,  protId): pass


	## the standard line substitution logic calling first substLines(...) and if not disableOn: addLines(...)
	## disableOn:  if True: the proxy should be disabled
	def apply(self):  # type(bool)

		self.substLines()
		if enableProxyPhaseOn: self.addLines()


	## called on disabling proxy or before appending current setup
	## beforeActivateOn: if False => disable proxy scenario
	def substLines(self):  # type(bool)
		mrp = self.substLineRules()  ## match-repl-pairs
	    	self.log("substLines: file=< %s >,  matchReplPairs=< %s >" % (self.path(),  mrp))
		with open(self.path(), 'r') as f:
			l = f.read()
			for mr in mrp:
			    	self.dbg('substLines: match=< %s >,  repl=< %s >' % (mr[0], mr[1]))
				if re.search(mr[0], l, flags=re.I):
				    	l = re.sub(mr[0], mr[1], l, flags=re.I)
		with open(self.path(), 'w') as f:
			f.write(l)


	def addLines(self):
		lines = []
		with open(self.path(), 'a') as f:
			f.write('\n')  # avoid appending on existing line
			for pid, pfx in proxyCfg.protIdPrefixMap.items():
			    self.log('addLines: file=< %s >,  protocTyp=< %s >' % (self.path(), pid))
			    self.addLineForProtId( lines, pid )
			for l in lines:
			    f.write(l)


	## helper method for console based files
	## e.g. < export https_proxy="http://myusr:mypass@myhost:8080" >
	## e.g. < export https_proxy="https://myusr:mypass@myhost:8080" >
	## e.g. < HTTP_PROXY="http://myhost:8080" >
	def envShLineGenFunc(self,  upperOn,  protId,  bashOn):
		envVar = '%s_proxy' % (protId)
		return '%s%s="%s://%s"' % (
			'export ' if bashOn else '',
			envVar.upper() if upperOn else envVar, 
			proxyCfg.protIdPrefixMap[protId], 
			proxyCfg.authSrvPortSuffix(True)
		)


	def setupShow(self):
                with open(self.path(), 'r') as f:
			lines = f.read()
			for l in re.findall(r'\n(.*prox.*)', lines, re.I):
				glog(l)  ## plain writing
				print '%s' % l



## proxy host, port etc. input UI form
class UiMgr:

    def log(self, msg): glog('UiMgr: %s' % msg)
    def dbg(self, msg): gdbg('UiMgr: %s' % msg)
    def err(self, msg): gerr('UiMgr: %s' % msg)

    def __init__(self):

        self.checkbox = gtk.CheckButton("Authentication?")
        self.box0 = gtk.VBox()
        self.box1 = gtk.HBox()
        self.box2 = gtk.VBox()

        self.box3 = gtk.HBox()
        self.box4 = gtk.HBox()
        self.box5 = gtk.HBox()
        self.box6 = gtk.HBox()

        self.entry = gtk.Entry()
        self.box0.pack_start(self.box2)
        self.box0.pack_start(self.checkbox)
        self.box0.pack_start(self.box1)
        self.box2.pack_start(self.box3)
        self.entry.show()
        self.button1 = gtk.Button("Set")
        self.button2 = gtk.Button("Remove")
        self.box1.pack_start(self.button1)
        self.box1.pack_start(self.button2)

        self.label1 = gtk.Label("Host")
        self.label2 = gtk.Label("Port")
        self.label3 = gtk.Label("HTTPS protocol prefix")
        self.label4 = gtk.Label("Ignore for hosts (' ,;|'-separators valid, '*.'-support)")

        self.button1.show()
        self.button2.show()
        self.entry2 = gtk.Entry()
        self.entry3 = gtk.Entry()
        self.entry3.set_text("http")
        self.entry4 = gtk.Entry()
        self.entry4.set_text("localhost, 127.0.0.1")
        self.dbg("httpsProtocol display default: < %s >" % (self.entry3.get_text()))
        self.box2.pack_start(self.box4)
        self.box2.pack_start(self.box5)
        self.box2.pack_start(self.box6)

        self.entry.connect("activate", self.act, self.entry)
        self.entry2.connect("activate", self.act, self.entry2)
        self.entry3.connect("activate", self.act, self.entry3)
        self.entry4.connect("activate", self.act, self.entry4)

        self.checkbox.connect("toggled", self.tog, None)

        self.box3.pack_start(self.label1)
        self.box3.pack_start(self.entry)
        self.box4.pack_start(self.label2)
        self.box4.pack_start(self.entry2)
        self.box5.pack_start(self.label3)
        self.box5.pack_start(self.entry3)
        self.box6.pack_start(self.label4)
        self.box6.pack_start(self.entry4)

        self.entry2.show()
        self.entry3.show()
        self.entry4.show()
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.add(self.box0)
        self.label1.show()
        self.label2.show()
        self.label3.show()
        self.label4.show()
        self.box2.show()
        self.box1.show()
        self.box0.show()
        self.box3.show()
        self.box4.show()
        self.box5.show()
        self.box6.show()
        self.checkbox.show()
        #
        # before show--
        #
        self.window.show()
        self.window.set_title("Ubproxy")
        self.opentext()
        self.button1.connect("clicked", self.proxyActivate, None)
        self.button2.connect("clicked", self.proxyDeactivate, None)
        self.button1.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.button2.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.window.connect("destroy", self.destroy)


    def createProxyCfg(self):
	global proxyCfg
	proxyCfg = ProxyCfg( self.entry.get_text(),  self.entry2.get_text(),  
		(self.uname if self.checkbox.get_active() else ''),  (self.passw if self.checkbox.get_active() else ''),  
		self.entry3.get_text(),  self.entry4.get_text())


    def proxyActivate(self, widget, data=None):  
	self.createProxyCfg()
	mgr.proxyActivate()

	
    def proxyDeactivate(self, widget, data=None):
	self.createProxyCfg()
	mgr.proxyDeactivate()


    def destroy(self, widget, data=None):
	mgr.destroy()
        gtk.main_quit()
        sys.exit(0)


    def act(self, widget, data=None):
        print data.get_text()


    def delete_event(self, widget, event, data=None):
        return False


    def tog(self, widget, data=None):
        if (widget.get_active()):
            uiAuthForm = UiAuth(self)


    def opentext(self):
        try:
            self.log('sudo test')
        except:
	    #self.err("opentext: error: %s" % sys.exc_info())  ## exception in logging should not use logging
	    print('ERROR: logging timestamp:  %s' % sys.exc_info())
            _log = None
            md = gtk.MessageDialog(self.window, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, gtk.BUTTONS_CLOSE,
                                   "You are not a Root user --Run This as 'sudo'")
            md.run()
            md.destroy()
            sys.exit(0)


    def finalDialog(self,msg):
        self.mbx = gtk.MessageDialog(self.window, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE, "%s (%s errors - see log for details)" % (msg,  errCnt))
        self.mbx.run()
        self.mbx.destroy()


## proxy auth infos (usrname + pass) UI input form
class UiAuth:
    def __init__(self, uiMgr):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("Authorization")
        self.vbox = gtk.VBox()
        self.hbox0 = gtk.HBox()
        self.hbox1 = gtk.HBox()
        self.hbox2 = gtk.HBox()
        self.label1 = gtk.Label("Username")
        self.label2 = gtk.Label("Password")
        self.entry1 = gtk.Entry()
        self.entry2 = gtk.Entry()
        self.entry2.set_visibility(False)
        self.but1 = gtk.Button("Ok")
        self.but2 = gtk.Button("Cancel")

        self.hbox0.pack_start(self.label1)
        self.hbox0.pack_start(self.entry1)
        self.hbox1.pack_start(self.label2)
        self.hbox1.pack_start(self.entry2)
        self.hbox2.pack_start(self.but1)
        self.hbox2.pack_start(self.but2)

        self.vbox.pack_start(self.hbox0)
        self.vbox.pack_start(self.hbox1)
        self.vbox.pack_start(self.hbox2)
        self.label1.show()
        self.label2.show()
        self.entry1.show()
        self.entry2.show()
        self.but1.show()
        self.but2.show()
        self.hbox0.show()
        self.hbox1.show()
        self.hbox2.show()
        self.vbox.show()
        self.window.add(self.vbox)
        self.window.show()
        self.but2.connect("clicked", self.cancel, uiMgr.checkbox)
        self.but2.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.but1.connect("clicked", self.ok, uiMgr)
        self.but1.connect_object("clicked", gtk.Widget.destroy, self.window)

    def ok(self, event, data=None):
        data.uname = self.entry1.get_text()
        data.passw = self.entry2.get_text()

    def cancel(self, event, data=None):
        data.set_active(False)

    def delete_event(self, widget, event, data=None):
        return True


if __name__ == "__main__":
	#mgr = Mgr().startUi()

	mgr = Mgr()
	if dbgOn: print ('DBG: ubproxy ui start')  ## debug
	## TODO cmd line feature without GUI:
	#print('usage: ubproxy  [-u usrname  -pw  -h <host>  -po <port>  [-protoPrefixes=<for-http,for-https,for-ftp>]]\n'
		#+ '  no args: open Gnome GUI for setup')
	if not os.geteuid() == 0:
		global args
		args = ['gksudo', sys.executable] + sys.argv + [os.environ]
		os.execlpe('gksudo', *args)
	if dbgOn: print ('DBG: after gksudo')  ## debug
	global uiMgr
	uiMgr = UiMgr()
	gtk.main()
	if dbgOn: print ('DBG: main finished')  ## debug
	print ""  ## better readability