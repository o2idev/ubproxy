#!/usr/bin/python
#
#   "Ubproxy"
#   with GTK Interface 
#
#   Ubuntu and derivatives proxy setting tool.
#   This sets the apt,bash and profile config-files.
#
#   An inevitable tool to configure proxy-settings in universities and office environmment.
#   Eliminates the need of repetitive editing of system files that is prone to frequent manual errors.  
#   Atleast 3 different individual config files needs to be edited to configure proxy settings,
#   This can be used in an environment where all the Three - ("http","https" and the "ftp") proxies
#   have the same settings.
#
#
#   Author:
#
#   E-mail:
#
#   Date:
#
#   Profile:
#
#   Forked from  https://code.google.com/p/ubproxy/
#
# Changelog:
# >  GTK support enabled
# >  Removed profile saving option
#


import gtk
import os
import subprocess
import re
import sys
from datetime import datetime
from pwd import getpwnam

pathsEnv = ["/etc/bash.bashrc", "/etc/environment"]
pathAptConf = "/etc/apt/apt.conf"
pathJreProps = subprocess.check_output(['/bin/bash', '-c', r"update-alternatives --query java | grep 'Value: ' | sed 's/Value: \(.*\)\/bin\/java/\1\/lib\/net.properties/'"]).strip()
logs = "/var/log/proxychangerlog"

## hard coded defaults: (TODO: make adjustable in GUI)

gsettingsUser = 'user'
gsettingsResetMode = 'none'
## false: only sets java.net.useSystemProxies=true ; true: also sets http.proxyHost=... etc.
pathJrePropsUpdHostPortOn = False


## https://askubuntu.com/a/484752
def prepare_gsettings():
    #pid = subprocess.check_output(["pgrep", "gnome-session"]).decode("utf-8").strip(A)
    pid = subprocess.check_output(["pgrep", "xfce4-session"]).decode("utf-8").strip()
    #cmd = "grep -z DBUS_SESSION_BUS_ADDRESS /proc/"+pid+"/environ|cut -d= -f2-"
    cmd = "grep -z DBUS_SESSION_BUS_ADDRESS /proc/"+pid+"/environ  |  cut -d= -f2-  |  sed -r 's/(.+)/DBUS_SESSION_BUS_ADDRESS=\\\\1/'"
    #print ("PATH: < %s >" % (os.environ["PATH"]))
    #print ("DBUS_SESSION_BUS_ADDRESS: < %s >" % (os.environ["DBUS_SESSION_BUS_ADDRESS"]))
    os.environ["DBUS_SESSION_BUS_ADDRESS"] = subprocess.check_output(['/bin/bash', '-c', cmd]).decode("utf-8").strip().replace("\0", "")
    #os.environ["DBUS_SESSION_BUS_ADDRESS"] = 'unix:abstract=/tmp/dbus-3LpGWPt0WX,guid=c17a8bf032ed6179687fa8265f215de7' 


class Sub:
    def __init__(self, base):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("Authorization")
        self.vbox = gtk.VBox()
        self.hbox0 = gtk.HBox()
        self.hbox1 = gtk.HBox()
        self.hbox2 = gtk.HBox()
        self.label1 = gtk.Label("Username")
        self.label2 = gtk.Label("Password")
        self.entry1 = gtk.Entry()
        self.entry2 = gtk.Entry()
        self.entry2.set_visibility(False)
        self.but1 = gtk.Button("Ok")
        self.but2 = gtk.Button("Cancel")

        self.hbox0.pack_start(self.label1)
        self.hbox0.pack_start(self.entry1)
        self.hbox1.pack_start(self.label2)
        self.hbox1.pack_start(self.entry2)
        self.hbox2.pack_start(self.but1)
        self.hbox2.pack_start(self.but2)

        self.vbox.pack_start(self.hbox0)
        self.vbox.pack_start(self.hbox1)
        self.vbox.pack_start(self.hbox2)
        self.label1.show()
        self.label2.show()
        self.entry1.show()
        self.entry2.show()
        self.but1.show()
        self.but2.show()
        self.hbox0.show()
        self.hbox1.show()
        self.hbox2.show()
        self.vbox.show()
        self.window.add(self.vbox)
        self.window.show()
        self.but2.connect("clicked", self.cancel, base.checkbox)
        self.but2.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.but1.connect("clicked", self.ok, base)
        self.but1.connect_object("clicked", gtk.Widget.destroy, self.window)

    def ok(self, event, data=None):
        data.uname = self.entry1.get_text()
        data.passw = self.entry2.get_text()

    def cancel(self, event, data=None):
        data.set_active(False)

    def delete_event(self, widget, event, data=None):
        return True


class Base:
    def __init__(self):

        self.checkbox = gtk.CheckButton("Authentication?")
        self.box0 = gtk.VBox()
        self.box1 = gtk.HBox()
        self.box2 = gtk.VBox()

        self.box3 = gtk.HBox()
        self.box4 = gtk.HBox()
        self.box5 = gtk.HBox()

        self.entry = gtk.Entry()
        self.box0.pack_start(self.box2)
        self.box0.pack_start(self.checkbox)
        self.box0.pack_start(self.box1)
        self.box2.pack_start(self.box3)
        self.entry.show()
        self.button1 = gtk.Button("Set")
        self.button2 = gtk.Button("Remove")
        self.box1.pack_start(self.button1)
        self.box1.pack_start(self.button2)

        self.label1 = gtk.Label("Host")
        self.label2 = gtk.Label("Port")
        self.label3 = gtk.Label("httpsProtocol")

        self.button1.show()
        self.button2.show()
        self.entry2 = gtk.Entry()
        self.entry3 = gtk.Entry()
        self.entry3.set_text("http")
        #self.flog.write("httpsProtocol display default: < %s >\n" % (self.entry3.get_text()))
        self.box2.pack_start(self.box4)
        self.box2.pack_start(self.box5)

        self.entry.connect("activate", self.act, self.entry)
        self.entry2.connect("activate", self.act, self.entry2)
        self.entry3.connect("activate", self.act, self.entry3)

        self.checkbox.connect("toggled", self.tog, None)

        self.box3.pack_start(self.label1)
        self.box3.pack_start(self.entry)
        self.box4.pack_start(self.label2)
        self.box4.pack_start(self.entry2)
        self.box5.pack_start(self.label3)
        self.box5.pack_start(self.entry3)

        self.entry2.show()
        self.entry3.show()
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.add(self.box0)
        self.label1.show()
        self.label2.show()
        self.label3.show()
        self.box2.show()
        self.box1.show()
        self.box0.show()
        self.box3.show()
        self.box4.show()
        self.box5.show()
        self.checkbox.show()
        #
        # before show--
        #
        self.window.show()
        self.window.set_title("Ubproxy")
        self.opentext()
        self.button1.connect("clicked", self.proxyActivate, None)
        self.button2.connect("clicked", self.proxyDeactivate, None)
        self.button1.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.button2.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.window.connect("destroy", self.destroy)

    def destroy(self, widget, data=None):
        if (self.flog != None):
            self.flog.close()
        gtk.main_quit()
        sys.exit(0)

    def act(self, widget, data=None):
        print data.get_text()

    def fin(self):
        self.host = self.entry.get_text()
        self.port = self.entry2.get_text()
        self.httpsProtocol = self.entry3.get_text()
        self.flog.write("httpsProtocol finally: < %s >\n" % (self.httpsProtocol))
        self.auth = self.checkbox.get_active()

    def tog(self, widget, data=None):
        if (widget.get_active()):
            sub = Sub(self)

    def proxyActivate(self, widget, data=None):
        self.proxyFilesBackup([pathsEnv[0], pathsEnv[1], pathAptConf, pathJreProps])
        self.flog.write("Files have been backed up in '~/.Ubuntu-Proxy/'  with .backup extension \n")
        self.proxyDeactivate4Files( True )
        self.fin()
        self.proxyActivate4Files(     self.host, self.port,  (self.uname if self.auth else ""),  (self.passw if self.auth else "") )
        self.proxyUpd4Gsettings( False, self.host, self.port,  (self.uname if self.auth else ""),  (self.passw if self.auth else "") )
        self.mbx = gtk.MessageDialog(self.window, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE,
                                     "SUCCESSFULLY " + ("SET" if self.host != "" else "REMOVED"))
        self.mbx.run()
        self.mbx.destroy()

    def delete_event(self, widget, event, data=None):
        return False

    def proxyDeactivate(self, widget, data=None):
        self.proxyFilesBackup([pathsEnv[0], pathsEnv[1], pathAptConf])
        self.flog.write("Files have been backed up in '~/.Ubuntu-Proxy/' with .backup extension \n")
        self.proxyDeactivate4Files( False )
        self.proxyUpd4Gsettings( True )
        self.flog.write("Old Proxy-Settings removed \n")
        self.mbx = gtk.MessageDialog(self.window, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE,
                                     "SUCCESSFULLY REMOVED")
        self.mbx.run()
        self.mbx.destroy()

    def opentext(self):
        try:
            self.flog = open(logs, "a")
            self.flog.write(str(datetime.now()) + "\n")
        except:
            self.flog = None
            md = gtk.MessageDialog(self.window, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, gtk.BUTTONS_CLOSE,
                                   "You are not a Root user --Run This as 'sudo'")
            md.run()
            md.destroy()
            sys.exit(0)


    ## on "https" it may be "http" or "https" depending on your env
    ## otherwise it returns <typ> as is
    def protPrefix(self, typ):
        return self.httpsProtocol if typ == "https" else typ


    def fileLinesAppend(self, path, proxyAuthSrvPortSuffix, lineGenFunc, srv, port, name, pasw ):

	logFileLinePattern = "proxyActivate4Files: file=< %s >,  protocTyp=< %s >" + (
		",  proxyAuthSrvPortSuffix= < %s >,  httpsProtocol=< %s >  (emtpy name will be ignored => no auth)\n" 
		% ( re.sub( r'^(.+:).*(@.+)$',  r'\1***\3',  proxyAuthSrvPortSuffix ),  self.httpsProtocol))
        lines = []
        fil = open(path, "a")
	fil.write('\n')  # avoid appending on existing line
        for protId in ("http", "ftp", "https"):
            self.flog.write(logFileLinePattern % (path, protId))
	    lineGenFunc( lines, path, protId, self.protPrefix(protId), proxyAuthSrvPortSuffix, srv, port, name, pasw  )
        for l in lines:
            fil.write(l)
        fil.close()


    def proxyActivate4Files(self, srv, port, name, pasw):

	proxyAuthSrvPortSuffix = "%s%s:%s" % ("" if name == "" else ("%s:%s@" % (name, pasw)),  srv, port)


        ## pathsEnv (/etc/bash.bashrc, /etc/environment)

	## e.g. < export https_proxy="http://myusr:mypass@myhost:8080" >
	## e.g. < export https_proxy="https://myusr:mypass@myhost:8080" >
	## e.g. < HTTP_PROXY="http://myhost:8080" >
	def pathEnvLineGenFunc(upperOn, protId, bashOn, protPrefix, proxyAuthSrvPortSuffix):
		v = "%s_proxy" % (protId)
		return "%s%s=\"%s://%s\"" % (
			"export " if bashOn else "",
			v.upper() if upperOn else v, 
			protPrefix, 
			proxyAuthSrvPortSuffix
		)

	def pathsEnvLineGenFuncLower(lines, path, protId, protPrefix, proxyAuthSrvPortSuffix, srv, port, name, pasw):
		lines.append( pathEnvLineGenFunc(  False,  protId,  (path.find("bash") != -1),  protPrefix, proxyAuthSrvPortSuffix  ) + "\n")

	def pathsEnvLineGenFuncUpper(lines, path, protId, protPrefix, proxyAuthSrvPortSuffix, srv, port, name, pasw):
		lines.append( pathEnvLineGenFunc(  True,  protId,  (path.find("bash") != -1),  protPrefix, proxyAuthSrvPortSuffix  ) + "\n")

	for upperC in (False, True):
		self.fileLinesAppend( pathsEnv[0], proxyAuthSrvPortSuffix, pathsEnvLineGenFuncUpper if upperC else pathsEnvLineGenFuncLower, srv, port, name, pasw )
		self.fileLinesAppend( pathsEnv[1], proxyAuthSrvPortSuffix, pathsEnvLineGenFuncUpper if upperC else pathsEnvLineGenFuncLower, srv, port, name, pasw )


        ## pathAptConf (apt.conf)

	## e.g. appending < Acquire::https::proxy "http://myusr:mypass@myhost:8080"; >
	def pathAptConfLineGenFunc(lines, path, protId, protPrefix, proxyAuthSrvPortSuffix, srv, port, name, pasw ):
            lines.append('Acquire::%s::proxy "%s://%s/";\n' % (protId, protPrefix, proxyAuthSrvPortSuffix))

	self.fileLinesAppend( pathAptConf, proxyAuthSrvPortSuffix, pathAptConfLineGenFunc, srv, port, name, pasw )
		

        ## pathJreProps (net.properties)

	## e.g. appending
        ##   https.proxyHost=myhost
	##   https.proxyPort=8080
	##   java.net.useSystemProxies=true
	if pathJrePropsUpdHostPortOn:
		def pathJrePropsLineGenFunc(lines, path, protId, protPrefix, proxyAuthSrvPortSuffix, srv, port, name, pasw):
        	    lines.append('%s.proxyHost=%s\n' % (protId, srv))
	            lines.append('%s.proxyPort=%s\n' % (protId, port))
		    #if protId == 'http':
	            	#lines.append('java.net.useSystemProxies=true\n')  ## done in proxyDeactivate4Files

		self.fileLinesAppend( pathJreProps, proxyAuthSrvPortSuffix, pathJrePropsLineGenFunc, srv, port, name, pasw  )
		

    def proxyFilesBackup(self, *files):
        homefol = os.getenv('HOME')
        folder = homefol + "/.Ubuntu-Proxy/"
        try:
    
            os.mkdir(folder)
        except:
            pass

        filstr = datetime.now().strftime('%Y%h%d_%H%M%S')
        newfolder = folder + filstr + "/"
        try:
            os.mkdir(newfolder)
        except:
            pass

        for fil in files:
            try:
                f1 = open(fil, "r")
                l = f1.read()
                f1.close()

                if (fil.find(".") == -1):
                    newname = fil[fil.rfind('/') + 1:] + ".backup"


                else:
                    fil = fil[fil.rfind('/') + 1:]
                    newname = fil[:fil.find(".")] + ".backup"
                newname = newfolder + newname
                f2 = open(newname, "w")
                f2.write(l)
                f2.close()
            except:
                pass


    def proxyDeactivate4File(self, path, matchReplPairs): 
		try:
		    self.flog.write("proxyDeactivate4Files: file=< %s >,  matchReplPairs=< %s >\n" % (path, matchReplPairs))
		    f = open(path, 'r')
		    l = f.read()
                    for mr in matchReplPairs:
		    	if re.search(mr[0], l, flags=re.I):
			    	l = re.sub(mr[0], mr[1], l, flags=re.I)
		    f.close()
		    f = open(path, 'w')
		    f.write(l)
		    f.close()
		except:
		    pass


    def proxyDeactivate4Files(self, beforeActivateOn): 

	self.flog.write('proxyDeactivate4Files: beforeActivateOn= %s\n' % (beforeActivateOn))

	for pathEnv in pathsEnv:
		self.proxyDeactivate4File(pathEnv, [[r'\n?(\s*(export)?\s+(https?|ftp)_proxy\s*=\s*".*")', r'']])

	self.proxyDeactivate4File(pathAptConf, [[r'\n?(\s*Acquire::.+::proxy\s+"[^"]*"\s*;)', r'']])
	
	mrPairs = [[r'(\n?\s*java.net.useSystemProxies\s*=\s*)(true|false)(.*)',  r'\1true\3' if beforeActivateOn else r'\1false\3']]
	if pathJrePropsUpdHostPortOn and beforeActivateOn:  ## => remove old http.proxyHost etc. entries
		mrPairs.append([r'\n?(\s*(https?|ftp)\.proxy(Host|Port)\s*=.+)',  r''])
	self.proxyDeactivate4File(pathJreProps, mrPairs)


    def proxyUpd4Gsettings(self, deactivateOn, srv = "", port = 8080, name = "", pasw = ""):
        self.flog.write("proxyUpd4Gsettings:  deactivateOn= %s,  protocTyp=< http for all >,  name:***@srv:port= < %s:***@%s:%s >  (emtpy name will be ignored => no auth)\n" % (deactivateOn, name, srv, port))

        #prepare_gsettings()

        uid = getpwnam( gsettingsUser )[2]
        os.setgid( uid )
        os.setuid( uid )
        #def setuidfunc():
        #    os.setgid(uid)
        #    os.setuid(uid)
        #os.system("gsettings set org.gnome.system.proxy.http enabled false")
        #subprocess.check_output('/bin/bash -c "gsettings set org.gnome.system.proxy mode \'auto\'"', preexec_fn=setuidfunc)

        if deactivateOn:
                os.system("gsettings set org.gnome.system.proxy mode '%s'" % (gsettingsResetMode))
                #os.system("gsettings set org.gnome.system.proxy.http enabled false")
                #subprocess.check_output('/bin/bash -c "gsettings set org.gnome.system.proxy mode \'auto\'"', preexec_fn=setuidfunc)
                return

        os.system("gsettings set org.gnome.system.proxy mode 'manual'")
        os.system("gsettings set org.gnome.system.proxy.http enabled true")
        os.system("gsettings set org.gnome.system.proxy.http host '%s'" % (srv))
        os.system("gsettings set org.gnome.system.proxy.http port '%s'" % (port))
        os.system("gsettings set org.gnome.system.proxy.ftp host '%s'" % (srv))
        os.system("gsettings set org.gnome.system.proxy.ftp port '%s'" % (port))
        ## this seems not possible to apply:
        #if self.httpsProtocol == "https":
        #    os.system("gsettings set org.gnome.system.proxy.https host '%s'" % (srv))
        #    os.system("gsettings set org.gnome.system.proxy.https port '%s'" % ())
        if name != "":
            os.system("gsettings set org.gnome.system.proxy.http authentication-user '%s'" % (name))
            os.system("gsettings set org.gnome.system.proxy.http authentication-password '%s'" % (pasw))
        else:
            os.system("gsettings set org.gnome.system.proxy.http use-authentication false")


      
if __name__ == "__main__":
    if not os.geteuid() == 0:
        args = ['gksudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('gksudo', *args)
    base = Base()
    gtk.main()
